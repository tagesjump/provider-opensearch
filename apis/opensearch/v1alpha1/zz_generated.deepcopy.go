//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Index) DeepCopyInto(out *Index) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Index.
func (in *Index) DeepCopy() *Index {
	if in == nil {
		return nil
	}
	out := new(Index)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Index) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexInitParameters) DeepCopyInto(out *IndexInitParameters) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = new(string)
		**out = **in
	}
	if in.AnalysisAnalyzer != nil {
		in, out := &in.AnalysisAnalyzer, &out.AnalysisAnalyzer
		*out = new(string)
		**out = **in
	}
	if in.AnalysisCharFilter != nil {
		in, out := &in.AnalysisCharFilter, &out.AnalysisCharFilter
		*out = new(string)
		**out = **in
	}
	if in.AnalysisFilter != nil {
		in, out := &in.AnalysisFilter, &out.AnalysisFilter
		*out = new(string)
		**out = **in
	}
	if in.AnalysisNormalizer != nil {
		in, out := &in.AnalysisNormalizer, &out.AnalysisNormalizer
		*out = new(string)
		**out = **in
	}
	if in.AnalysisTokenizer != nil {
		in, out := &in.AnalysisTokenizer, &out.AnalysisTokenizer
		*out = new(string)
		**out = **in
	}
	if in.AnalyzeMaxTokenCount != nil {
		in, out := &in.AnalyzeMaxTokenCount, &out.AnalyzeMaxTokenCount
		*out = new(string)
		**out = **in
	}
	if in.AutoExpandReplicas != nil {
		in, out := &in.AutoExpandReplicas, &out.AutoExpandReplicas
		*out = new(string)
		**out = **in
	}
	if in.BlocksMetadata != nil {
		in, out := &in.BlocksMetadata, &out.BlocksMetadata
		*out = new(bool)
		**out = **in
	}
	if in.BlocksRead != nil {
		in, out := &in.BlocksRead, &out.BlocksRead
		*out = new(bool)
		**out = **in
	}
	if in.BlocksReadOnly != nil {
		in, out := &in.BlocksReadOnly, &out.BlocksReadOnly
		*out = new(bool)
		**out = **in
	}
	if in.BlocksReadOnlyAllowDelete != nil {
		in, out := &in.BlocksReadOnlyAllowDelete, &out.BlocksReadOnlyAllowDelete
		*out = new(bool)
		**out = **in
	}
	if in.BlocksWrite != nil {
		in, out := &in.BlocksWrite, &out.BlocksWrite
		*out = new(bool)
		**out = **in
	}
	if in.Codec != nil {
		in, out := &in.Codec, &out.Codec
		*out = new(string)
		**out = **in
	}
	if in.DefaultPipeline != nil {
		in, out := &in.DefaultPipeline, &out.DefaultPipeline
		*out = new(string)
		**out = **in
	}
	if in.ForceDestroy != nil {
		in, out := &in.ForceDestroy, &out.ForceDestroy
		*out = new(bool)
		**out = **in
	}
	if in.GcDeletes != nil {
		in, out := &in.GcDeletes, &out.GcDeletes
		*out = new(string)
		**out = **in
	}
	if in.HighlightMaxAnalyzedOffset != nil {
		in, out := &in.HighlightMaxAnalyzedOffset, &out.HighlightMaxAnalyzedOffset
		*out = new(string)
		**out = **in
	}
	if in.IncludeTypeName != nil {
		in, out := &in.IncludeTypeName, &out.IncludeTypeName
		*out = new(string)
		**out = **in
	}
	if in.IndexKnn != nil {
		in, out := &in.IndexKnn, &out.IndexKnn
		*out = new(bool)
		**out = **in
	}
	if in.IndexKnnAlgoParamEfSearch != nil {
		in, out := &in.IndexKnnAlgoParamEfSearch, &out.IndexKnnAlgoParamEfSearch
		*out = new(string)
		**out = **in
	}
	if in.IndexSimilarityDefault != nil {
		in, out := &in.IndexSimilarityDefault, &out.IndexSimilarityDefault
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogLevel != nil {
		in, out := &in.IndexingSlowlogLevel, &out.IndexingSlowlogLevel
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogSource != nil {
		in, out := &in.IndexingSlowlogSource, &out.IndexingSlowlogSource
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexDebug != nil {
		in, out := &in.IndexingSlowlogThresholdIndexDebug, &out.IndexingSlowlogThresholdIndexDebug
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexInfo != nil {
		in, out := &in.IndexingSlowlogThresholdIndexInfo, &out.IndexingSlowlogThresholdIndexInfo
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexTrace != nil {
		in, out := &in.IndexingSlowlogThresholdIndexTrace, &out.IndexingSlowlogThresholdIndexTrace
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexWarn != nil {
		in, out := &in.IndexingSlowlogThresholdIndexWarn, &out.IndexingSlowlogThresholdIndexWarn
		*out = new(string)
		**out = **in
	}
	if in.LoadFixedBitsetFiltersEagerly != nil {
		in, out := &in.LoadFixedBitsetFiltersEagerly, &out.LoadFixedBitsetFiltersEagerly
		*out = new(bool)
		**out = **in
	}
	if in.Mappings != nil {
		in, out := &in.Mappings, &out.Mappings
		*out = new(string)
		**out = **in
	}
	if in.MaxDocvalueFieldsSearch != nil {
		in, out := &in.MaxDocvalueFieldsSearch, &out.MaxDocvalueFieldsSearch
		*out = new(string)
		**out = **in
	}
	if in.MaxInnerResultWindow != nil {
		in, out := &in.MaxInnerResultWindow, &out.MaxInnerResultWindow
		*out = new(string)
		**out = **in
	}
	if in.MaxNgramDiff != nil {
		in, out := &in.MaxNgramDiff, &out.MaxNgramDiff
		*out = new(string)
		**out = **in
	}
	if in.MaxRefreshListeners != nil {
		in, out := &in.MaxRefreshListeners, &out.MaxRefreshListeners
		*out = new(string)
		**out = **in
	}
	if in.MaxRegexLength != nil {
		in, out := &in.MaxRegexLength, &out.MaxRegexLength
		*out = new(string)
		**out = **in
	}
	if in.MaxRescoreWindow != nil {
		in, out := &in.MaxRescoreWindow, &out.MaxRescoreWindow
		*out = new(string)
		**out = **in
	}
	if in.MaxResultWindow != nil {
		in, out := &in.MaxResultWindow, &out.MaxResultWindow
		*out = new(string)
		**out = **in
	}
	if in.MaxScriptFields != nil {
		in, out := &in.MaxScriptFields, &out.MaxScriptFields
		*out = new(string)
		**out = **in
	}
	if in.MaxShingleDiff != nil {
		in, out := &in.MaxShingleDiff, &out.MaxShingleDiff
		*out = new(string)
		**out = **in
	}
	if in.MaxTermsCount != nil {
		in, out := &in.MaxTermsCount, &out.MaxTermsCount
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NumberOfReplicas != nil {
		in, out := &in.NumberOfReplicas, &out.NumberOfReplicas
		*out = new(string)
		**out = **in
	}
	if in.NumberOfRoutingShards != nil {
		in, out := &in.NumberOfRoutingShards, &out.NumberOfRoutingShards
		*out = new(string)
		**out = **in
	}
	if in.NumberOfShards != nil {
		in, out := &in.NumberOfShards, &out.NumberOfShards
		*out = new(string)
		**out = **in
	}
	if in.RefreshInterval != nil {
		in, out := &in.RefreshInterval, &out.RefreshInterval
		*out = new(string)
		**out = **in
	}
	if in.RolloverAlias != nil {
		in, out := &in.RolloverAlias, &out.RolloverAlias
		*out = new(string)
		**out = **in
	}
	if in.RoutingAllocationEnable != nil {
		in, out := &in.RoutingAllocationEnable, &out.RoutingAllocationEnable
		*out = new(string)
		**out = **in
	}
	if in.RoutingPartitionSize != nil {
		in, out := &in.RoutingPartitionSize, &out.RoutingPartitionSize
		*out = new(string)
		**out = **in
	}
	if in.RoutingRebalanceEnable != nil {
		in, out := &in.RoutingRebalanceEnable, &out.RoutingRebalanceEnable
		*out = new(string)
		**out = **in
	}
	if in.SearchIdleAfter != nil {
		in, out := &in.SearchIdleAfter, &out.SearchIdleAfter
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogLevel != nil {
		in, out := &in.SearchSlowlogLevel, &out.SearchSlowlogLevel
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchDebug != nil {
		in, out := &in.SearchSlowlogThresholdFetchDebug, &out.SearchSlowlogThresholdFetchDebug
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchInfo != nil {
		in, out := &in.SearchSlowlogThresholdFetchInfo, &out.SearchSlowlogThresholdFetchInfo
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchTrace != nil {
		in, out := &in.SearchSlowlogThresholdFetchTrace, &out.SearchSlowlogThresholdFetchTrace
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchWarn != nil {
		in, out := &in.SearchSlowlogThresholdFetchWarn, &out.SearchSlowlogThresholdFetchWarn
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryDebug != nil {
		in, out := &in.SearchSlowlogThresholdQueryDebug, &out.SearchSlowlogThresholdQueryDebug
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryInfo != nil {
		in, out := &in.SearchSlowlogThresholdQueryInfo, &out.SearchSlowlogThresholdQueryInfo
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryTrace != nil {
		in, out := &in.SearchSlowlogThresholdQueryTrace, &out.SearchSlowlogThresholdQueryTrace
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryWarn != nil {
		in, out := &in.SearchSlowlogThresholdQueryWarn, &out.SearchSlowlogThresholdQueryWarn
		*out = new(string)
		**out = **in
	}
	if in.ShardCheckOnStartup != nil {
		in, out := &in.ShardCheckOnStartup, &out.ShardCheckOnStartup
		*out = new(string)
		**out = **in
	}
	if in.SortField != nil {
		in, out := &in.SortField, &out.SortField
		*out = new(string)
		**out = **in
	}
	if in.SortOrder != nil {
		in, out := &in.SortOrder, &out.SortOrder
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexInitParameters.
func (in *IndexInitParameters) DeepCopy() *IndexInitParameters {
	if in == nil {
		return nil
	}
	out := new(IndexInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexList) DeepCopyInto(out *IndexList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Index, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexList.
func (in *IndexList) DeepCopy() *IndexList {
	if in == nil {
		return nil
	}
	out := new(IndexList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *IndexList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexObservation) DeepCopyInto(out *IndexObservation) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = new(string)
		**out = **in
	}
	if in.AnalysisAnalyzer != nil {
		in, out := &in.AnalysisAnalyzer, &out.AnalysisAnalyzer
		*out = new(string)
		**out = **in
	}
	if in.AnalysisCharFilter != nil {
		in, out := &in.AnalysisCharFilter, &out.AnalysisCharFilter
		*out = new(string)
		**out = **in
	}
	if in.AnalysisFilter != nil {
		in, out := &in.AnalysisFilter, &out.AnalysisFilter
		*out = new(string)
		**out = **in
	}
	if in.AnalysisNormalizer != nil {
		in, out := &in.AnalysisNormalizer, &out.AnalysisNormalizer
		*out = new(string)
		**out = **in
	}
	if in.AnalysisTokenizer != nil {
		in, out := &in.AnalysisTokenizer, &out.AnalysisTokenizer
		*out = new(string)
		**out = **in
	}
	if in.AnalyzeMaxTokenCount != nil {
		in, out := &in.AnalyzeMaxTokenCount, &out.AnalyzeMaxTokenCount
		*out = new(string)
		**out = **in
	}
	if in.AutoExpandReplicas != nil {
		in, out := &in.AutoExpandReplicas, &out.AutoExpandReplicas
		*out = new(string)
		**out = **in
	}
	if in.BlocksMetadata != nil {
		in, out := &in.BlocksMetadata, &out.BlocksMetadata
		*out = new(bool)
		**out = **in
	}
	if in.BlocksRead != nil {
		in, out := &in.BlocksRead, &out.BlocksRead
		*out = new(bool)
		**out = **in
	}
	if in.BlocksReadOnly != nil {
		in, out := &in.BlocksReadOnly, &out.BlocksReadOnly
		*out = new(bool)
		**out = **in
	}
	if in.BlocksReadOnlyAllowDelete != nil {
		in, out := &in.BlocksReadOnlyAllowDelete, &out.BlocksReadOnlyAllowDelete
		*out = new(bool)
		**out = **in
	}
	if in.BlocksWrite != nil {
		in, out := &in.BlocksWrite, &out.BlocksWrite
		*out = new(bool)
		**out = **in
	}
	if in.Codec != nil {
		in, out := &in.Codec, &out.Codec
		*out = new(string)
		**out = **in
	}
	if in.DefaultPipeline != nil {
		in, out := &in.DefaultPipeline, &out.DefaultPipeline
		*out = new(string)
		**out = **in
	}
	if in.ForceDestroy != nil {
		in, out := &in.ForceDestroy, &out.ForceDestroy
		*out = new(bool)
		**out = **in
	}
	if in.GcDeletes != nil {
		in, out := &in.GcDeletes, &out.GcDeletes
		*out = new(string)
		**out = **in
	}
	if in.HighlightMaxAnalyzedOffset != nil {
		in, out := &in.HighlightMaxAnalyzedOffset, &out.HighlightMaxAnalyzedOffset
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludeTypeName != nil {
		in, out := &in.IncludeTypeName, &out.IncludeTypeName
		*out = new(string)
		**out = **in
	}
	if in.IndexKnn != nil {
		in, out := &in.IndexKnn, &out.IndexKnn
		*out = new(bool)
		**out = **in
	}
	if in.IndexKnnAlgoParamEfSearch != nil {
		in, out := &in.IndexKnnAlgoParamEfSearch, &out.IndexKnnAlgoParamEfSearch
		*out = new(string)
		**out = **in
	}
	if in.IndexSimilarityDefault != nil {
		in, out := &in.IndexSimilarityDefault, &out.IndexSimilarityDefault
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogLevel != nil {
		in, out := &in.IndexingSlowlogLevel, &out.IndexingSlowlogLevel
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogSource != nil {
		in, out := &in.IndexingSlowlogSource, &out.IndexingSlowlogSource
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexDebug != nil {
		in, out := &in.IndexingSlowlogThresholdIndexDebug, &out.IndexingSlowlogThresholdIndexDebug
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexInfo != nil {
		in, out := &in.IndexingSlowlogThresholdIndexInfo, &out.IndexingSlowlogThresholdIndexInfo
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexTrace != nil {
		in, out := &in.IndexingSlowlogThresholdIndexTrace, &out.IndexingSlowlogThresholdIndexTrace
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexWarn != nil {
		in, out := &in.IndexingSlowlogThresholdIndexWarn, &out.IndexingSlowlogThresholdIndexWarn
		*out = new(string)
		**out = **in
	}
	if in.LoadFixedBitsetFiltersEagerly != nil {
		in, out := &in.LoadFixedBitsetFiltersEagerly, &out.LoadFixedBitsetFiltersEagerly
		*out = new(bool)
		**out = **in
	}
	if in.Mappings != nil {
		in, out := &in.Mappings, &out.Mappings
		*out = new(string)
		**out = **in
	}
	if in.MaxDocvalueFieldsSearch != nil {
		in, out := &in.MaxDocvalueFieldsSearch, &out.MaxDocvalueFieldsSearch
		*out = new(string)
		**out = **in
	}
	if in.MaxInnerResultWindow != nil {
		in, out := &in.MaxInnerResultWindow, &out.MaxInnerResultWindow
		*out = new(string)
		**out = **in
	}
	if in.MaxNgramDiff != nil {
		in, out := &in.MaxNgramDiff, &out.MaxNgramDiff
		*out = new(string)
		**out = **in
	}
	if in.MaxRefreshListeners != nil {
		in, out := &in.MaxRefreshListeners, &out.MaxRefreshListeners
		*out = new(string)
		**out = **in
	}
	if in.MaxRegexLength != nil {
		in, out := &in.MaxRegexLength, &out.MaxRegexLength
		*out = new(string)
		**out = **in
	}
	if in.MaxRescoreWindow != nil {
		in, out := &in.MaxRescoreWindow, &out.MaxRescoreWindow
		*out = new(string)
		**out = **in
	}
	if in.MaxResultWindow != nil {
		in, out := &in.MaxResultWindow, &out.MaxResultWindow
		*out = new(string)
		**out = **in
	}
	if in.MaxScriptFields != nil {
		in, out := &in.MaxScriptFields, &out.MaxScriptFields
		*out = new(string)
		**out = **in
	}
	if in.MaxShingleDiff != nil {
		in, out := &in.MaxShingleDiff, &out.MaxShingleDiff
		*out = new(string)
		**out = **in
	}
	if in.MaxTermsCount != nil {
		in, out := &in.MaxTermsCount, &out.MaxTermsCount
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NumberOfReplicas != nil {
		in, out := &in.NumberOfReplicas, &out.NumberOfReplicas
		*out = new(string)
		**out = **in
	}
	if in.NumberOfRoutingShards != nil {
		in, out := &in.NumberOfRoutingShards, &out.NumberOfRoutingShards
		*out = new(string)
		**out = **in
	}
	if in.NumberOfShards != nil {
		in, out := &in.NumberOfShards, &out.NumberOfShards
		*out = new(string)
		**out = **in
	}
	if in.RefreshInterval != nil {
		in, out := &in.RefreshInterval, &out.RefreshInterval
		*out = new(string)
		**out = **in
	}
	if in.RolloverAlias != nil {
		in, out := &in.RolloverAlias, &out.RolloverAlias
		*out = new(string)
		**out = **in
	}
	if in.RoutingAllocationEnable != nil {
		in, out := &in.RoutingAllocationEnable, &out.RoutingAllocationEnable
		*out = new(string)
		**out = **in
	}
	if in.RoutingPartitionSize != nil {
		in, out := &in.RoutingPartitionSize, &out.RoutingPartitionSize
		*out = new(string)
		**out = **in
	}
	if in.RoutingRebalanceEnable != nil {
		in, out := &in.RoutingRebalanceEnable, &out.RoutingRebalanceEnable
		*out = new(string)
		**out = **in
	}
	if in.SearchIdleAfter != nil {
		in, out := &in.SearchIdleAfter, &out.SearchIdleAfter
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogLevel != nil {
		in, out := &in.SearchSlowlogLevel, &out.SearchSlowlogLevel
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchDebug != nil {
		in, out := &in.SearchSlowlogThresholdFetchDebug, &out.SearchSlowlogThresholdFetchDebug
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchInfo != nil {
		in, out := &in.SearchSlowlogThresholdFetchInfo, &out.SearchSlowlogThresholdFetchInfo
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchTrace != nil {
		in, out := &in.SearchSlowlogThresholdFetchTrace, &out.SearchSlowlogThresholdFetchTrace
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchWarn != nil {
		in, out := &in.SearchSlowlogThresholdFetchWarn, &out.SearchSlowlogThresholdFetchWarn
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryDebug != nil {
		in, out := &in.SearchSlowlogThresholdQueryDebug, &out.SearchSlowlogThresholdQueryDebug
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryInfo != nil {
		in, out := &in.SearchSlowlogThresholdQueryInfo, &out.SearchSlowlogThresholdQueryInfo
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryTrace != nil {
		in, out := &in.SearchSlowlogThresholdQueryTrace, &out.SearchSlowlogThresholdQueryTrace
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryWarn != nil {
		in, out := &in.SearchSlowlogThresholdQueryWarn, &out.SearchSlowlogThresholdQueryWarn
		*out = new(string)
		**out = **in
	}
	if in.ShardCheckOnStartup != nil {
		in, out := &in.ShardCheckOnStartup, &out.ShardCheckOnStartup
		*out = new(string)
		**out = **in
	}
	if in.SortField != nil {
		in, out := &in.SortField, &out.SortField
		*out = new(string)
		**out = **in
	}
	if in.SortOrder != nil {
		in, out := &in.SortOrder, &out.SortOrder
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexObservation.
func (in *IndexObservation) DeepCopy() *IndexObservation {
	if in == nil {
		return nil
	}
	out := new(IndexObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexParameters) DeepCopyInto(out *IndexParameters) {
	*out = *in
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = new(string)
		**out = **in
	}
	if in.AnalysisAnalyzer != nil {
		in, out := &in.AnalysisAnalyzer, &out.AnalysisAnalyzer
		*out = new(string)
		**out = **in
	}
	if in.AnalysisCharFilter != nil {
		in, out := &in.AnalysisCharFilter, &out.AnalysisCharFilter
		*out = new(string)
		**out = **in
	}
	if in.AnalysisFilter != nil {
		in, out := &in.AnalysisFilter, &out.AnalysisFilter
		*out = new(string)
		**out = **in
	}
	if in.AnalysisNormalizer != nil {
		in, out := &in.AnalysisNormalizer, &out.AnalysisNormalizer
		*out = new(string)
		**out = **in
	}
	if in.AnalysisTokenizer != nil {
		in, out := &in.AnalysisTokenizer, &out.AnalysisTokenizer
		*out = new(string)
		**out = **in
	}
	if in.AnalyzeMaxTokenCount != nil {
		in, out := &in.AnalyzeMaxTokenCount, &out.AnalyzeMaxTokenCount
		*out = new(string)
		**out = **in
	}
	if in.AutoExpandReplicas != nil {
		in, out := &in.AutoExpandReplicas, &out.AutoExpandReplicas
		*out = new(string)
		**out = **in
	}
	if in.BlocksMetadata != nil {
		in, out := &in.BlocksMetadata, &out.BlocksMetadata
		*out = new(bool)
		**out = **in
	}
	if in.BlocksRead != nil {
		in, out := &in.BlocksRead, &out.BlocksRead
		*out = new(bool)
		**out = **in
	}
	if in.BlocksReadOnly != nil {
		in, out := &in.BlocksReadOnly, &out.BlocksReadOnly
		*out = new(bool)
		**out = **in
	}
	if in.BlocksReadOnlyAllowDelete != nil {
		in, out := &in.BlocksReadOnlyAllowDelete, &out.BlocksReadOnlyAllowDelete
		*out = new(bool)
		**out = **in
	}
	if in.BlocksWrite != nil {
		in, out := &in.BlocksWrite, &out.BlocksWrite
		*out = new(bool)
		**out = **in
	}
	if in.Codec != nil {
		in, out := &in.Codec, &out.Codec
		*out = new(string)
		**out = **in
	}
	if in.DefaultPipeline != nil {
		in, out := &in.DefaultPipeline, &out.DefaultPipeline
		*out = new(string)
		**out = **in
	}
	if in.ForceDestroy != nil {
		in, out := &in.ForceDestroy, &out.ForceDestroy
		*out = new(bool)
		**out = **in
	}
	if in.GcDeletes != nil {
		in, out := &in.GcDeletes, &out.GcDeletes
		*out = new(string)
		**out = **in
	}
	if in.HighlightMaxAnalyzedOffset != nil {
		in, out := &in.HighlightMaxAnalyzedOffset, &out.HighlightMaxAnalyzedOffset
		*out = new(string)
		**out = **in
	}
	if in.IncludeTypeName != nil {
		in, out := &in.IncludeTypeName, &out.IncludeTypeName
		*out = new(string)
		**out = **in
	}
	if in.IndexKnn != nil {
		in, out := &in.IndexKnn, &out.IndexKnn
		*out = new(bool)
		**out = **in
	}
	if in.IndexKnnAlgoParamEfSearch != nil {
		in, out := &in.IndexKnnAlgoParamEfSearch, &out.IndexKnnAlgoParamEfSearch
		*out = new(string)
		**out = **in
	}
	if in.IndexSimilarityDefault != nil {
		in, out := &in.IndexSimilarityDefault, &out.IndexSimilarityDefault
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogLevel != nil {
		in, out := &in.IndexingSlowlogLevel, &out.IndexingSlowlogLevel
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogSource != nil {
		in, out := &in.IndexingSlowlogSource, &out.IndexingSlowlogSource
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexDebug != nil {
		in, out := &in.IndexingSlowlogThresholdIndexDebug, &out.IndexingSlowlogThresholdIndexDebug
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexInfo != nil {
		in, out := &in.IndexingSlowlogThresholdIndexInfo, &out.IndexingSlowlogThresholdIndexInfo
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexTrace != nil {
		in, out := &in.IndexingSlowlogThresholdIndexTrace, &out.IndexingSlowlogThresholdIndexTrace
		*out = new(string)
		**out = **in
	}
	if in.IndexingSlowlogThresholdIndexWarn != nil {
		in, out := &in.IndexingSlowlogThresholdIndexWarn, &out.IndexingSlowlogThresholdIndexWarn
		*out = new(string)
		**out = **in
	}
	if in.LoadFixedBitsetFiltersEagerly != nil {
		in, out := &in.LoadFixedBitsetFiltersEagerly, &out.LoadFixedBitsetFiltersEagerly
		*out = new(bool)
		**out = **in
	}
	if in.Mappings != nil {
		in, out := &in.Mappings, &out.Mappings
		*out = new(string)
		**out = **in
	}
	if in.MaxDocvalueFieldsSearch != nil {
		in, out := &in.MaxDocvalueFieldsSearch, &out.MaxDocvalueFieldsSearch
		*out = new(string)
		**out = **in
	}
	if in.MaxInnerResultWindow != nil {
		in, out := &in.MaxInnerResultWindow, &out.MaxInnerResultWindow
		*out = new(string)
		**out = **in
	}
	if in.MaxNgramDiff != nil {
		in, out := &in.MaxNgramDiff, &out.MaxNgramDiff
		*out = new(string)
		**out = **in
	}
	if in.MaxRefreshListeners != nil {
		in, out := &in.MaxRefreshListeners, &out.MaxRefreshListeners
		*out = new(string)
		**out = **in
	}
	if in.MaxRegexLength != nil {
		in, out := &in.MaxRegexLength, &out.MaxRegexLength
		*out = new(string)
		**out = **in
	}
	if in.MaxRescoreWindow != nil {
		in, out := &in.MaxRescoreWindow, &out.MaxRescoreWindow
		*out = new(string)
		**out = **in
	}
	if in.MaxResultWindow != nil {
		in, out := &in.MaxResultWindow, &out.MaxResultWindow
		*out = new(string)
		**out = **in
	}
	if in.MaxScriptFields != nil {
		in, out := &in.MaxScriptFields, &out.MaxScriptFields
		*out = new(string)
		**out = **in
	}
	if in.MaxShingleDiff != nil {
		in, out := &in.MaxShingleDiff, &out.MaxShingleDiff
		*out = new(string)
		**out = **in
	}
	if in.MaxTermsCount != nil {
		in, out := &in.MaxTermsCount, &out.MaxTermsCount
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NumberOfReplicas != nil {
		in, out := &in.NumberOfReplicas, &out.NumberOfReplicas
		*out = new(string)
		**out = **in
	}
	if in.NumberOfRoutingShards != nil {
		in, out := &in.NumberOfRoutingShards, &out.NumberOfRoutingShards
		*out = new(string)
		**out = **in
	}
	if in.NumberOfShards != nil {
		in, out := &in.NumberOfShards, &out.NumberOfShards
		*out = new(string)
		**out = **in
	}
	if in.RefreshInterval != nil {
		in, out := &in.RefreshInterval, &out.RefreshInterval
		*out = new(string)
		**out = **in
	}
	if in.RolloverAlias != nil {
		in, out := &in.RolloverAlias, &out.RolloverAlias
		*out = new(string)
		**out = **in
	}
	if in.RoutingAllocationEnable != nil {
		in, out := &in.RoutingAllocationEnable, &out.RoutingAllocationEnable
		*out = new(string)
		**out = **in
	}
	if in.RoutingPartitionSize != nil {
		in, out := &in.RoutingPartitionSize, &out.RoutingPartitionSize
		*out = new(string)
		**out = **in
	}
	if in.RoutingRebalanceEnable != nil {
		in, out := &in.RoutingRebalanceEnable, &out.RoutingRebalanceEnable
		*out = new(string)
		**out = **in
	}
	if in.SearchIdleAfter != nil {
		in, out := &in.SearchIdleAfter, &out.SearchIdleAfter
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogLevel != nil {
		in, out := &in.SearchSlowlogLevel, &out.SearchSlowlogLevel
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchDebug != nil {
		in, out := &in.SearchSlowlogThresholdFetchDebug, &out.SearchSlowlogThresholdFetchDebug
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchInfo != nil {
		in, out := &in.SearchSlowlogThresholdFetchInfo, &out.SearchSlowlogThresholdFetchInfo
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchTrace != nil {
		in, out := &in.SearchSlowlogThresholdFetchTrace, &out.SearchSlowlogThresholdFetchTrace
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdFetchWarn != nil {
		in, out := &in.SearchSlowlogThresholdFetchWarn, &out.SearchSlowlogThresholdFetchWarn
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryDebug != nil {
		in, out := &in.SearchSlowlogThresholdQueryDebug, &out.SearchSlowlogThresholdQueryDebug
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryInfo != nil {
		in, out := &in.SearchSlowlogThresholdQueryInfo, &out.SearchSlowlogThresholdQueryInfo
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryTrace != nil {
		in, out := &in.SearchSlowlogThresholdQueryTrace, &out.SearchSlowlogThresholdQueryTrace
		*out = new(string)
		**out = **in
	}
	if in.SearchSlowlogThresholdQueryWarn != nil {
		in, out := &in.SearchSlowlogThresholdQueryWarn, &out.SearchSlowlogThresholdQueryWarn
		*out = new(string)
		**out = **in
	}
	if in.ShardCheckOnStartup != nil {
		in, out := &in.ShardCheckOnStartup, &out.ShardCheckOnStartup
		*out = new(string)
		**out = **in
	}
	if in.SortField != nil {
		in, out := &in.SortField, &out.SortField
		*out = new(string)
		**out = **in
	}
	if in.SortOrder != nil {
		in, out := &in.SortOrder, &out.SortOrder
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexParameters.
func (in *IndexParameters) DeepCopy() *IndexParameters {
	if in == nil {
		return nil
	}
	out := new(IndexParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexPermissionsInitParameters) DeepCopyInto(out *IndexPermissionsInitParameters) {
	*out = *in
	if in.AllowedActions != nil {
		in, out := &in.AllowedActions, &out.AllowedActions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DocumentLevelSecurity != nil {
		in, out := &in.DocumentLevelSecurity, &out.DocumentLevelSecurity
		*out = new(string)
		**out = **in
	}
	if in.FieldLevelSecurity != nil {
		in, out := &in.FieldLevelSecurity, &out.FieldLevelSecurity
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IndexPatterns != nil {
		in, out := &in.IndexPatterns, &out.IndexPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaskedFields != nil {
		in, out := &in.MaskedFields, &out.MaskedFields
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexPermissionsInitParameters.
func (in *IndexPermissionsInitParameters) DeepCopy() *IndexPermissionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(IndexPermissionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexPermissionsObservation) DeepCopyInto(out *IndexPermissionsObservation) {
	*out = *in
	if in.AllowedActions != nil {
		in, out := &in.AllowedActions, &out.AllowedActions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DocumentLevelSecurity != nil {
		in, out := &in.DocumentLevelSecurity, &out.DocumentLevelSecurity
		*out = new(string)
		**out = **in
	}
	if in.FieldLevelSecurity != nil {
		in, out := &in.FieldLevelSecurity, &out.FieldLevelSecurity
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IndexPatterns != nil {
		in, out := &in.IndexPatterns, &out.IndexPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaskedFields != nil {
		in, out := &in.MaskedFields, &out.MaskedFields
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexPermissionsObservation.
func (in *IndexPermissionsObservation) DeepCopy() *IndexPermissionsObservation {
	if in == nil {
		return nil
	}
	out := new(IndexPermissionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexPermissionsParameters) DeepCopyInto(out *IndexPermissionsParameters) {
	*out = *in
	if in.AllowedActions != nil {
		in, out := &in.AllowedActions, &out.AllowedActions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DocumentLevelSecurity != nil {
		in, out := &in.DocumentLevelSecurity, &out.DocumentLevelSecurity
		*out = new(string)
		**out = **in
	}
	if in.FieldLevelSecurity != nil {
		in, out := &in.FieldLevelSecurity, &out.FieldLevelSecurity
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IndexPatterns != nil {
		in, out := &in.IndexPatterns, &out.IndexPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaskedFields != nil {
		in, out := &in.MaskedFields, &out.MaskedFields
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexPermissionsParameters.
func (in *IndexPermissionsParameters) DeepCopy() *IndexPermissionsParameters {
	if in == nil {
		return nil
	}
	out := new(IndexPermissionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexSpec) DeepCopyInto(out *IndexSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexSpec.
func (in *IndexSpec) DeepCopy() *IndexSpec {
	if in == nil {
		return nil
	}
	out := new(IndexSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexStatus) DeepCopyInto(out *IndexStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexStatus.
func (in *IndexStatus) DeepCopy() *IndexStatus {
	if in == nil {
		return nil
	}
	out := new(IndexStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Monitor) DeepCopyInto(out *Monitor) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Monitor.
func (in *Monitor) DeepCopy() *Monitor {
	if in == nil {
		return nil
	}
	out := new(Monitor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Monitor) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonitorInitParameters) DeepCopyInto(out *MonitorInitParameters) {
	*out = *in
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonitorInitParameters.
func (in *MonitorInitParameters) DeepCopy() *MonitorInitParameters {
	if in == nil {
		return nil
	}
	out := new(MonitorInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonitorList) DeepCopyInto(out *MonitorList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Monitor, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonitorList.
func (in *MonitorList) DeepCopy() *MonitorList {
	if in == nil {
		return nil
	}
	out := new(MonitorList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MonitorList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonitorObservation) DeepCopyInto(out *MonitorObservation) {
	*out = *in
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonitorObservation.
func (in *MonitorObservation) DeepCopy() *MonitorObservation {
	if in == nil {
		return nil
	}
	out := new(MonitorObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonitorParameters) DeepCopyInto(out *MonitorParameters) {
	*out = *in
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonitorParameters.
func (in *MonitorParameters) DeepCopy() *MonitorParameters {
	if in == nil {
		return nil
	}
	out := new(MonitorParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonitorSpec) DeepCopyInto(out *MonitorSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonitorSpec.
func (in *MonitorSpec) DeepCopy() *MonitorSpec {
	if in == nil {
		return nil
	}
	out := new(MonitorSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonitorStatus) DeepCopyInto(out *MonitorStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonitorStatus.
func (in *MonitorStatus) DeepCopy() *MonitorStatus {
	if in == nil {
		return nil
	}
	out := new(MonitorStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Role) DeepCopyInto(out *Role) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Role.
func (in *Role) DeepCopy() *Role {
	if in == nil {
		return nil
	}
	out := new(Role)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Role) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleInitParameters) DeepCopyInto(out *RoleInitParameters) {
	*out = *in
	if in.ClusterPermissions != nil {
		in, out := &in.ClusterPermissions, &out.ClusterPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.IndexPermissions != nil {
		in, out := &in.IndexPermissions, &out.IndexPermissions
		*out = make([]IndexPermissionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RoleName != nil {
		in, out := &in.RoleName, &out.RoleName
		*out = new(string)
		**out = **in
	}
	if in.TenantPermissions != nil {
		in, out := &in.TenantPermissions, &out.TenantPermissions
		*out = make([]TenantPermissionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleInitParameters.
func (in *RoleInitParameters) DeepCopy() *RoleInitParameters {
	if in == nil {
		return nil
	}
	out := new(RoleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleList) DeepCopyInto(out *RoleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Role, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleList.
func (in *RoleList) DeepCopy() *RoleList {
	if in == nil {
		return nil
	}
	out := new(RoleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RoleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleObservation) DeepCopyInto(out *RoleObservation) {
	*out = *in
	if in.ClusterPermissions != nil {
		in, out := &in.ClusterPermissions, &out.ClusterPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IndexPermissions != nil {
		in, out := &in.IndexPermissions, &out.IndexPermissions
		*out = make([]IndexPermissionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RoleName != nil {
		in, out := &in.RoleName, &out.RoleName
		*out = new(string)
		**out = **in
	}
	if in.TenantPermissions != nil {
		in, out := &in.TenantPermissions, &out.TenantPermissions
		*out = make([]TenantPermissionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleObservation.
func (in *RoleObservation) DeepCopy() *RoleObservation {
	if in == nil {
		return nil
	}
	out := new(RoleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleParameters) DeepCopyInto(out *RoleParameters) {
	*out = *in
	if in.ClusterPermissions != nil {
		in, out := &in.ClusterPermissions, &out.ClusterPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.IndexPermissions != nil {
		in, out := &in.IndexPermissions, &out.IndexPermissions
		*out = make([]IndexPermissionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RoleName != nil {
		in, out := &in.RoleName, &out.RoleName
		*out = new(string)
		**out = **in
	}
	if in.TenantPermissions != nil {
		in, out := &in.TenantPermissions, &out.TenantPermissions
		*out = make([]TenantPermissionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleParameters.
func (in *RoleParameters) DeepCopy() *RoleParameters {
	if in == nil {
		return nil
	}
	out := new(RoleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleSpec) DeepCopyInto(out *RoleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleSpec.
func (in *RoleSpec) DeepCopy() *RoleSpec {
	if in == nil {
		return nil
	}
	out := new(RoleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleStatus) DeepCopyInto(out *RoleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleStatus.
func (in *RoleStatus) DeepCopy() *RoleStatus {
	if in == nil {
		return nil
	}
	out := new(RoleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Script) DeepCopyInto(out *Script) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Script.
func (in *Script) DeepCopy() *Script {
	if in == nil {
		return nil
	}
	out := new(Script)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Script) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScriptInitParameters) DeepCopyInto(out *ScriptInitParameters) {
	*out = *in
	if in.Lang != nil {
		in, out := &in.Lang, &out.Lang
		*out = new(string)
		**out = **in
	}
	if in.ScriptID != nil {
		in, out := &in.ScriptID, &out.ScriptID
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScriptInitParameters.
func (in *ScriptInitParameters) DeepCopy() *ScriptInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScriptInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScriptList) DeepCopyInto(out *ScriptList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Script, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScriptList.
func (in *ScriptList) DeepCopy() *ScriptList {
	if in == nil {
		return nil
	}
	out := new(ScriptList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ScriptList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScriptObservation) DeepCopyInto(out *ScriptObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Lang != nil {
		in, out := &in.Lang, &out.Lang
		*out = new(string)
		**out = **in
	}
	if in.ScriptID != nil {
		in, out := &in.ScriptID, &out.ScriptID
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScriptObservation.
func (in *ScriptObservation) DeepCopy() *ScriptObservation {
	if in == nil {
		return nil
	}
	out := new(ScriptObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScriptParameters) DeepCopyInto(out *ScriptParameters) {
	*out = *in
	if in.Lang != nil {
		in, out := &in.Lang, &out.Lang
		*out = new(string)
		**out = **in
	}
	if in.ScriptID != nil {
		in, out := &in.ScriptID, &out.ScriptID
		*out = new(string)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScriptParameters.
func (in *ScriptParameters) DeepCopy() *ScriptParameters {
	if in == nil {
		return nil
	}
	out := new(ScriptParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScriptSpec) DeepCopyInto(out *ScriptSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScriptSpec.
func (in *ScriptSpec) DeepCopy() *ScriptSpec {
	if in == nil {
		return nil
	}
	out := new(ScriptSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScriptStatus) DeepCopyInto(out *ScriptStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScriptStatus.
func (in *ScriptStatus) DeepCopy() *ScriptStatus {
	if in == nil {
		return nil
	}
	out := new(ScriptStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TenantPermissionsInitParameters) DeepCopyInto(out *TenantPermissionsInitParameters) {
	*out = *in
	if in.AllowedActions != nil {
		in, out := &in.AllowedActions, &out.AllowedActions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TenantPatterns != nil {
		in, out := &in.TenantPatterns, &out.TenantPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TenantPermissionsInitParameters.
func (in *TenantPermissionsInitParameters) DeepCopy() *TenantPermissionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TenantPermissionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TenantPermissionsObservation) DeepCopyInto(out *TenantPermissionsObservation) {
	*out = *in
	if in.AllowedActions != nil {
		in, out := &in.AllowedActions, &out.AllowedActions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TenantPatterns != nil {
		in, out := &in.TenantPatterns, &out.TenantPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TenantPermissionsObservation.
func (in *TenantPermissionsObservation) DeepCopy() *TenantPermissionsObservation {
	if in == nil {
		return nil
	}
	out := new(TenantPermissionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TenantPermissionsParameters) DeepCopyInto(out *TenantPermissionsParameters) {
	*out = *in
	if in.AllowedActions != nil {
		in, out := &in.AllowedActions, &out.AllowedActions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TenantPatterns != nil {
		in, out := &in.TenantPatterns, &out.TenantPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TenantPermissionsParameters.
func (in *TenantPermissionsParameters) DeepCopy() *TenantPermissionsParameters {
	if in == nil {
		return nil
	}
	out := new(TenantPermissionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *User) DeepCopyInto(out *User) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new User.
func (in *User) DeepCopy() *User {
	if in == nil {
		return nil
	}
	out := new(User)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *User) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserInitParameters) DeepCopyInto(out *UserInitParameters) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BackendRoles != nil {
		in, out := &in.BackendRoles, &out.BackendRoles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserInitParameters.
func (in *UserInitParameters) DeepCopy() *UserInitParameters {
	if in == nil {
		return nil
	}
	out := new(UserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserList) DeepCopyInto(out *UserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]User, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserList.
func (in *UserList) DeepCopy() *UserList {
	if in == nil {
		return nil
	}
	out := new(UserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserObservation) DeepCopyInto(out *UserObservation) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BackendRoles != nil {
		in, out := &in.BackendRoles, &out.BackendRoles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserObservation.
func (in *UserObservation) DeepCopy() *UserObservation {
	if in == nil {
		return nil
	}
	out := new(UserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserParameters) DeepCopyInto(out *UserParameters) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BackendRoles != nil {
		in, out := &in.BackendRoles, &out.BackendRoles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.PasswordHashSecretRef != nil {
		in, out := &in.PasswordHashSecretRef, &out.PasswordHashSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserParameters.
func (in *UserParameters) DeepCopy() *UserParameters {
	if in == nil {
		return nil
	}
	out := new(UserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserSpec) DeepCopyInto(out *UserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserSpec.
func (in *UserSpec) DeepCopy() *UserSpec {
	if in == nil {
		return nil
	}
	out := new(UserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserStatus) DeepCopyInto(out *UserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserStatus.
func (in *UserStatus) DeepCopy() *UserStatus {
	if in == nil {
		return nil
	}
	out := new(UserStatus)
	in.DeepCopyInto(out)
	return out
}
