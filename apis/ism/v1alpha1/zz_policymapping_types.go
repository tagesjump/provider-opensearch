// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyMappingInitParameters struct {

	// (Set of Map of String) When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	Include []map[string]*string `json:"include,omitempty" tf:"include,omitempty"`

	// (String) Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	Indexes *string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// (Boolean)
	IsSafe *bool `json:"isSafe,omitempty" tf:"is_safe,omitempty"`

	// (Set of String)
	// +listType=set
	ManagedIndexes []*string `json:"managedIndexes,omitempty" tf:"managed_indexes,omitempty"`

	// (String) The name of the policy.
	// The name of the policy.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// (String) After a change in policy takes place, specify the state for the index to transition to
	// After a change in policy takes place, specify the state for the index to transition to
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type PolicyMappingObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of Map of String) When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	Include []map[string]*string `json:"include,omitempty" tf:"include,omitempty"`

	// (String) Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	Indexes *string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// (Boolean)
	IsSafe *bool `json:"isSafe,omitempty" tf:"is_safe,omitempty"`

	// (Set of String)
	// +listType=set
	ManagedIndexes []*string `json:"managedIndexes,omitempty" tf:"managed_indexes,omitempty"`

	// (String) The name of the policy.
	// The name of the policy.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// (String) After a change in policy takes place, specify the state for the index to transition to
	// After a change in policy takes place, specify the state for the index to transition to
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type PolicyMappingParameters struct {

	// (Set of Map of String) When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	// +kubebuilder:validation:Optional
	Include []map[string]*string `json:"include,omitempty" tf:"include,omitempty"`

	// (String) Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	// +kubebuilder:validation:Optional
	Indexes *string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	IsSafe *bool `json:"isSafe,omitempty" tf:"is_safe,omitempty"`

	// (Set of String)
	// +kubebuilder:validation:Optional
	// +listType=set
	ManagedIndexes []*string `json:"managedIndexes,omitempty" tf:"managed_indexes,omitempty"`

	// (String) The name of the policy.
	// The name of the policy.
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// (String) After a change in policy takes place, specify the state for the index to transition to
	// After a change in policy takes place, specify the state for the index to transition to
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

// PolicyMappingSpec defines the desired state of PolicyMapping
type PolicyMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyMappingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyMappingInitParameters `json:"initProvider,omitempty"`
}

// PolicyMappingStatus defines the observed state of PolicyMapping.
type PolicyMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyMapping is the Schema for the PolicyMappings API. Provides an OpenSearch Index State Management (ISM) policy. Please refer to the OpenSearch ISM documentation for details.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opensearch}
type PolicyMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.indexes) || (has(self.initProvider) && has(self.initProvider.indexes))",message="spec.forProvider.indexes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyId) || (has(self.initProvider) && has(self.initProvider.policyId))",message="spec.forProvider.policyId is a required parameter"
	Spec   PolicyMappingSpec   `json:"spec"`
	Status PolicyMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyMappingList contains a list of PolicyMappings
type PolicyMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyMapping `json:"items"`
}

// Repository type metadata.
var (
	PolicyMapping_Kind             = "PolicyMapping"
	PolicyMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyMapping_Kind}.String()
	PolicyMapping_KindAPIVersion   = PolicyMapping_Kind + "." + CRDGroupVersion.String()
	PolicyMapping_GroupVersionKind = CRDGroupVersion.WithKind(PolicyMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyMapping{}, &PolicyMappingList{})
}
